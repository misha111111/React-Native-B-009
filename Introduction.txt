Browser
	HTML
	CSS
	Javascript
	
	
.NET  - Converter
Java - Converter
Python - Converter


Static HTML
	<div>
		<input type='button' value='Login' />
	</div>
	
div input are called tags/elements
type value are attributes of element input
input is called inner element of div

Dynamic HTML
	var element = document.createElement('input');
	element.setAttribute('type', 'button');
	element.setAttribute('value', 'Login');
	
	var divElement = document.createElement('div');
	divElement.appendChild(element);
	

var UIFramework = {
	createElement: function(options){
		var element = document.createElement('input');
		element.setAttribute('type', 'button');
		element.setAttribute('value', options.text);
		return element;
	}
}

var divElement = document.createElement('div');
divElement.appendChild(UIFramework.createElement({ text: 'Login' }));
divElement.appendChild(UIFramework.createElement({ text: 'Signup' }));


React.createElement('div', 'Welcome to Home');
React.createElement('button', 'Login')

// Above approach works before babel

// After Babel - JSX
<div> Welcome to Home </div>
<input type='button' value='Login' />

JSX and HTML
HTML - Pure HTML component
JSX - element converts to React.createElement and then html component gets generated
HTML - Not Compiled
JSX - Compiled and all tags must be closed

React => using babel plugin, JSX code is converted into old standard of react and that old code generates html components dynamically.

Mobile Frameworks
Sencha, Angular, Phonegap => HTML + JS + CSS => packed as apk or ipa => opened internally using brower => safari brower in apple, chrome in android 
=> Hybrid Apps (HTML View)

React Native => JS Bundle => packed as apk or ipa => When App is opened, JS is executed => 
this js when executed in android => generates Android Components
this js when executed in IOS => generates IOS components
=> Hybrid Native Apps (Native View)


Wednesday - Demo - run in ios and android

Web
	HTML
	CSS
	JS => Head - script is loaded first and then body gets loaded
		  Body - body elements gets loaded first and then javascript executes
		  
SPA - Single Page Application
	- Create empty div in body and inject all elements dynamically(using javascript)
	- React, Angular, Sencha, VUE
	
React => JS library for user interfaces
web interface => React + React DOM
mobile interface => React + React Native
vr interface => React + React VR

Web Interface => React, React DOM
	React => React.createElement or use JSX with babel plugin
	ReactDOM => ReactDOM.render(what to render, where to render)
	
	
<div id="app"> </div>

<script> 
	ReactDOM.render(React.createElement('button', 'Login'), document.getElementById('app'))
</script>

using Babel => React, ReactDOM, Babel
<script type='text/babel'> 
	ReactDOM.render(<input type='button' value='Login' />, document.getElementById('app'))
</script>

React 			vs React Native
div 	  						View
free text						Text
h1 h2 h3 h4 h5 h6				Add styles to Text manually
input type=button				Button
intput type=text		

var TestComponent = function(props){
	return <div>{props.title}</div>;
};

var TestComponent = function(props) {
	return <View> <Text>{props.title} </Text></View>;
}

var neha = {
	name: 'Neha Singh',
	age: 30,
	ccNumber: 123456
}

var prakash = {
	name: 'Prakash Kumar',
	age: 25,
	ccNumber: 234566
}
		
// Object Oriented Javascript
	Security
	Reducing the code

// Concepts
	Class
	Objects
	Access Specifiers - private, public
	Constructor - Passing values at the time of initialization
	Inheritance - Accessing Parent class methods

// Syntax
var className = function(){
	// private 
	// global

	// public
	this.
}

var Demo = function(){
	this.welcome = function(){
		console.log('Welcome to Demo');
	}
}

var obj = new Demo();
obj.welcome();


var Student = function(){
	this.name = '';
	this.age = '';
	this.ccNumber ='';
}

var neha = new Student();
var prakash = new Student();


var Student2 = function(name, age, ccNumber){
	this.name = name;
	this.age = age;
	this.ccNumber = ccNumber;
}

var neha = new Student2('Neha Singh', 30, 123456)
var prakash = new Student2('Prakash', 25, 345678)

var Student3 = function(name, age, ccNumber){
	var ccNumber = ccNumber;

	this.name = name;
	this.age = age;

	this.print = function(){
		console.log(ccNumber.replace('456', 'XXX'));
	}
}
var neha = new Student3('Neha Singh', 30, 123456)
var prakash = new Student3('Prakash', 25, 345678)

var Calculator = function(){
	this.add = function(x, y){
		return x + y;
	}

	this.sub = function(x, y){
		x = x || 0;
		y = y || 0;
		return x - y;
	}

	this.mul = (x, y) => {
		return x * y;
	}

	this.div = (x, y) => x / y;
}
var calc =  new Calculator();

// prototypes - To inject methods into existing classes
 --- Adv - to support old browsers by injecting methods into existing classes

Calculator.prototype.print = () => console.log('Calculator Feature')

Naming Conventions:
camelCase => first letter is in lower case and higher case starts with new word
	scientificCalculator
	use case - functions, variables
variableCase => first letter is in higher case and higher case starts with new word
	scientificCalculator
	use case - Class
upper case => all characters are in upper case
	STATES, COUNTRIES
	use case - constants
lower case => all characters are in lower case
	states, x, y
	use case - variables

Similarities
	Variable Field Property Member
	Function Method API

var Calculator = function(){

	// private variable
	var secret = 123456; 

	// private function
	var log = function(value){
		console.log(value);
	}

	// global variable
	pi = 3.14

	// global function
	print = function() {
		console.log('Calculator')
	}

	// public variable
	this.version = 1.0;

	// add - public method
	this.add = function(x, y){
		return x + y;
	}
}


if Person is class, age is Field
if age is public => obj.age
if age is private => obj.age is undefined
if age is global => age 

function test( name, age, city){

}

test('a', 20, 'hyd')

test('', '', 'hyd')

function test(options){


}
test({ city: 'hyd'})


// Before ES6

ES6 cant support private or global, it supports only public


var Calculator = function(){
	this.add = function(x, y){
		return x + y;
	}

	this.sub = function(x, y){
		x = x || 0;
		y = y || 0;
		return x - y;
	}

	this.mul = (x, y) => {
		return x * y;
	}

	this.div = (x, y) => x / y;
}

// In ES6
class Calculator {
	add(x, y) {
		return x + y;
	}
	sub(x, y){
		x = x || 0;
		y = y || 0;
	}
}

function Person(options){
	var name = options.name || '';
	this.getName = () => name;
	this.setName = (value) => name = value;
}

var neha = new Person({ name: 'Neha Singh'})

class Person {
	constructor(options){
		this.name = options.value || '';
	}
	getName(){
		return this.name;
	}
	setName(value){
		this.name = value;
	}
}

const pi = 3.14;

class SavingsAccount {
	getAccountInfo(){

	}
	getSavingsDetails(){

	}
}

class CurrentAccount {
	getAccountInfo(){

	}
}

class Account {
	getAccountInfo(){

	}
}

class SavingsAccount extends Account {
	getSavingsDetails(){

	}
}

class CurrentAccount extends Account {
}

class Component {
	constructor(props){
		this.props = props;
	}
}
class Person extends Component {
	getName(){
		return this.props.name;
	}
	getCity(){
		return this.props.city;
	}
}
var preethi = new Person({ name: 'Preethi', city: 'HYD' });
preethi.getName();
preethi.getCity();

class Teacher extends Component{
	getClass(){
		return this.props.class;
	}
}






















	
	
		  

	
	



































	
	
	
	
	
	
	
	
	
	
	
	

